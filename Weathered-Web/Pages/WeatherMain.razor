@page "/"
@using System.Text.Json;
@using PirateWeather_DotNetLib
@using Weathered_Lib.Models
@using Weathered_Web.Components;
@inject HttpClient _http;

<form @onsubmit="() => SubmitLocation()">
    <div Class="d-flex gap-1 pa-4" style="max-width: 500px;margin:0px auto">
        <MudTextField
            @bind-Value="LocationInput"
            Label="Enter a Location"
            Variant="Variant.Outlined"
            Margin="Margin.Dense">
        </MudTextField>
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Primary"
            Disabled=loading
            OnClick="() => SubmitLocation()">
                Submit
        </MudButton>
    </div>
</form>

<style>
    .mud-expand-panel .mud-expand-panel-content {
        padding: 0 8px 8px;
    }
</style>

@if (loading)
{
    <div Class="d-flex justify-content-center">
        <MudProgressCircular Color="Color.Primary" Style="height:100px;width:100px" Indeterminate="true" />
    </div>
}

@if (response != null)
{
    <h6 Style="text-align:center">Nearest Weather Station:</h6>
    <h5 Style="text-align:center">@response.StationName</h5>

    <div class="mx-auto">
        <MudExpansionPanels MultiExpansion="true">

            <MudExpansionPanel IsExpandedChanged="GetForecast" Class="custom-expansion-panel">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.CloudUpload" class="mr-3" />
                        <MudText>Forecast</MudText>
                        @if (forecastLoading)
                        {
                            <div Class="d-flex justify-content-center ml-3">
                                <MudProgressCircular Color="Color.Primary" Style="height:25px;width:25px" Indeterminate="true" />
                            </div>
                        }
                    </div>
                </TitleContent>
                <ChildContent>
                    <MudGrid Spacing="1">
                        @if (forecast != null)
                        {
                            @foreach (WeatherData day in forecast.OrderBy(x => x.RecordDate).Take(6))
                            {
                                <WeatherCard day="day"></WeatherCard>
                            }
                        }
                    </MudGrid>
                </ChildContent>
            </MudExpansionPanel>

            <MudExpansionPanel IsInitiallyExpanded="true" Class="custom-expansion-panel">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.History" class="mr-3"></MudIcon>
                        <MudText>Weather History</MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <MudGrid Spacing="1">
                        @foreach (WeatherData day in response.Data.OrderByDescending(x => x.RecordDate).Take(6))
                        {
                            <WeatherCard day="day"></WeatherCard>
                        }
                    </MudGrid>
                </ChildContent>
            </MudExpansionPanel>

        </MudExpansionPanels>
    </div>
}

<div Class="mt-4">
    <MudText Typo="Typo.h6" style="text-align:center">Disclaimers!</MudText>
    <MudText Typo="Typo.body2" style="text-align:center">Items highlighted yellow are historical forecasts, and do not necessarily reflect reality.</MudText>
    <MudText Typo="Typo.body2" style="text-align:center">Some stations update a little slower than others. I check for updates every hour.</MudText>
    <MudText Typo="Typo.body2" style="text-align:center">Purple Data credit to the NCEI GSOD Dataset. Yellow Data credit to Pirate Weather.</MudText>
</div>

@code {
    public string LocationInput = "";
    public bool loading = false;
    public bool forecastLoading = false;

    private string lastInput { get; set; } = "";
    private WeatheredResponse? response;
    private List<WeatherData>? responseData, forecast;

    private async Task SubmitLocation(string stationNumber = "")
    {
        string trimmedInput = LocationInput.Trim();
        if (trimmedInput != lastInput || stationNumber != "")
        {
            loading = true;
            response = null;
            responseData = forecast = null;
            lastInput = trimmedInput;
            var req = new WeatheredRequest();
            if (stationNumber != "")
                req.StationNumber = stationNumber;
            else
                req.Location = trimmedInput;

            response = await GetWeatheredResponse(req);

            responseData = response.Data.OrderByDescending(x => x.RecordDate).Take(7).ToList();

            response.Data.RemoveAt(response.Data.OrderByDescending(x => x.RecordDate).First().Is_Forecast ? 7 : 0); //cheeky

            loading = false;
            StateHasChanged();

            List<WeatherData> needHistoricalForecast = response.Data.Where(x => x.Is_Forecast).ToList();
            if (response.StationNumber != "" && needHistoricalForecast.Count > 0)
            {
                var histForecast = await GetHistoricalForecast(response.Latitude, response.Longitude, needHistoricalForecast[0].RecordDate);
                for (var i = 0; i < needHistoricalForecast.Count; i++)
                {
                    if (histForecast.Find(x => x.RecordDate == needHistoricalForecast[i].RecordDate) != null)
                    {
                        var match = response.Data.FindIndex(x => x.RecordDate == needHistoricalForecast[i].RecordDate);
                        response.Data[match] = histForecast.First(x => x.RecordDate == needHistoricalForecast[i].RecordDate);
                    }
                    else
                    {
                        needHistoricalForecast[i].No_Data = true;
                    }
                }
            }
        }
    }

    private async Task GetForecast()
    {
        if (forecast == null && !forecastLoading)
        {
            forecastLoading = true;
            var req = new PirateWeatheredRequest(response.Latitude, response.Longitude, DateOnly.MinValue);
            var res = await _http.PostAsJsonAsync("api/getPirateWeather", req);
            var obj = await res.Content.ReadFromJsonAsync<DailyData[]>() ?? new DailyData[0];
            forecast = new List<WeatherData>();
            int start = responseData[0].Is_Forecast ? 0 : 1;
            for (int i = start; i < obj.Length; i++)
            {
                forecast.Add(new WeatherData(obj[i], DateOnly.FromDateTime(DateTimeOffset.FromUnixTimeSeconds(obj[i].Time).UtcDateTime)));
            }
            forecastLoading = false;
        }
    }

    private async Task<WeatheredResponse> GetWeatheredResponse(WeatheredRequest req)
    {
        var res = await _http.PostAsJsonAsync("api/getWeathered", req);
        return await res.Content.ReadFromJsonAsync<WeatheredResponse>() ?? new WeatheredResponse();
    }

    private async Task<List<WeatherData>> GetHistoricalForecast(double latitude, double longitude, DateOnly date)
    {
        var req = new PirateWeatheredRequest(latitude, longitude, date);
        var res = await _http.PostAsJsonAsync("api/getHistoricalForecast", req);
        var obj = await res.Content.ReadFromJsonAsync<DailyData[]>() ?? new DailyData[0];
        List<WeatherData> resp = new List<WeatherData>();
        for (var i = 0; i < obj.Length; i++)
        {
            DateOnly itemDate = DateOnly.FromDateTime(new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(obj[i].Time));
            resp.Add(new WeatherData(obj[i], itemDate));
        }
        return resp;
    }

    protected override void OnInitialized()
    {
        
    }


    public void Dispose()
    {
        
    }
}