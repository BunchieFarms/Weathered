@page "/"
@using Weathered.Components
@using Weathered.Data;
@using Weathered.Models;
@using System.Text.Json;
@inject WeatheredService _ws;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div Class="d-flex gap-1 pa-4" style="max-width: 500px;margin:0px auto">
    <MudTextField @bind-Value="LocationInput" Label="Enter a Location" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled=loading OnClick="SubmitLocation">Submit</MudButton>
</div>

@if (loading)
{
    <div Class="d-flex justify-content-center">
        <MudProgressCircular Color="Color.Primary" Style="height:100px;width:100px" Indeterminate="true" />
    </div>
}

@if (response != null)
{
    <h6 Style="text-align:center">Nearest Weather Station:</h6>
    <h5 Style="text-align:center">@response.StationName</h5>
    <div Class="d-flex flex-wrap justify-space-around ">
        @foreach (DaySummary day in response.DaySummaries.AsEnumerable().Reverse().Take(6))
        {
            <WeatherCard day="day"></WeatherCard>
        }
    </div>
}

<div Class="mt-4">
    <MudText Typo="Typo.h6" style="text-align:center">Disclaimers!</MudText>
    <MudText Typo="Typo.body2" style="text-align:center">Items highlighted yellow are historical forecasts, and do not necessarily reflect reality.</MudText>
    <MudText Typo="Typo.body2" style="text-align:center">Some stations update a little slower than others. I check for updates every hour.</MudText>
    <MudText Typo="Typo.body2" style="text-align:center">Purple Data credit to the NCEI GSOD Dataset.</MudText>
</div>

@code {
    public string LocationInput = "";
    public bool loading = false;

    private string lastInput { get; set; } = "";
    private WeatheredResponse? response;

    private async Task SubmitLocation()
    {
        string trimmedInput = LocationInput.Trim();
        if (trimmedInput != lastInput)
        {
            loading = true;
            response = null;
            lastInput = trimmedInput;
            response = await _ws.GetWeatheredResponse(trimmedInput);
            if (response.StationLocId > 0)
            {
                var needHistoricalForecast = response.DaySummaries.Where(x => x.isForecast).ToList();
                if (needHistoricalForecast.Count() > 0)
                {
                    var histForecast = _ws.GetHistoricalForecast(response.Lat, response.Lon, needHistoricalForecast[0].Date);
                    for (var i = 0; i < needHistoricalForecast.Count; i++)
                    {
                        response.DaySummaries.First(x => x.Date == needHistoricalForecast[i].Date).Temp = histForecast[i].temperatureMax;
                        response.DaySummaries.First(x => x.Date == needHistoricalForecast[i].Date).Prcp = histForecast[i].precipAccumulation;
                    }
                }
            }
            loading = false;
        }
    }
}