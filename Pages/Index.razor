@page "/"
@using Weathered.Data;
@using Weathered.Models;
@using System.Text.Json;
@inject WeatheredService _ws;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div Class="d-flex gap-1 pa-4" style="max-width: 500px;margin:0px auto">
    <MudTextField @bind-Value:get="LocationInput" @bind-Value:set="(value) => { LocationInput = value.Trim(); }" Label="Enter a Location" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled=loading OnClick="SubmitLocation">Submit</MudButton>
</div>

@if (loading)
{
    <div Class="d-flex justify-content-center">
        <MudProgressCircular Color="Color.Primary" Style="height:100px;width:100px" Indeterminate="true" />
    </div>
}

@if (response != null)
{
    <h6 Style="text-align:center">Nearest Weather Station:</h6>
    <h5 Style="text-align:center">@response.StationName</h5>
    <div Class="d-flex flex-wrap justify-space-around ">
        @foreach (DaySummary day in response.DaySummaries.AsEnumerable().Reverse().Take(6))
        {
            <MudCard Style="@GetCardBGColor(day)" Class="d-flex ma-4 flex-grow-1 justify-content-center">
                <MudCardContent Style="text-align:center">
                    <MudText>@day.Date</MudText>
                    <MudText Typo="Typo.body2">@GetDayRain(day)</MudText>
                    <MudText Typo="Typo.body2">@GetDayTemp(day)</MudText>
                </MudCardContent>
            </MudCard>
        }
    </div>
}

<div Class="mt-4">
    <MudText Typo="Typo.h6" style="text-align:center">Disclaimers!</MudText>
    <MudText Typo="Typo.body2" style="text-align:center">Items highlighted yellow are historical forecasts, and do not necessarily reflect reality.</MudText>
    <MudText Typo="Typo.body2" style="text-align:center">Some stations update a little slower than others. I check for updates every hour.</MudText>
    <MudText Typo="Typo.body2" style="text-align:center">Purple Data credit to the NCEI GSOD Dataset.</MudText>
</div>

@code {
    public string LocationInput = "";
    public bool loading = false;

    private string lastInput { get; set; } = "";
    private WeatheredResponse? response;
    private List<LocalHistory> localHistory = new List<LocalHistory>();

    private string GetCardBGColor(DaySummary day)
    {
        return day.isForecast ? "background-color:rgba(255,152,0,.25)" : "background-color:rgba(89,74,226,.25)";
    }

    private string GetDayRain(DaySummary day)
    {
        return day.Prcp == 0 ? "no rain" : day.Prcp < .25f ? "<.25 in rain" : $"{(day.Prcp).ToString("#.##")} in rain";
    }

    private string GetDayTemp(DaySummary day)
    {
        return day.isForecast ? $"{Math.Round(day.Temp)} max temp" : $"{Math.Round(day.Temp)} avg temp";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var history = await localStorage.GetItemAsStringAsync("StationHistory");
        if (history != null && history.Trim().Length > 0)
        {
            localHistory = JsonSerializer.Deserialize<List<LocalHistory>>(history);
        }
        else
        {
            await localStorage.SetItemAsStringAsync("StationHistory", JsonSerializer.Serialize(new List<LocalHistory>()));
        }
    }

    private async Task SubmitLocation()
    {
        if (LocationInput != lastInput)
        {
            loading = true;
            response = null;
            lastInput = LocationInput;
            response = await _ws.GetWeatheredResponse(LocationInput);
            var needHistoricalForecast = response.DaySummaries.Where(x => x.isForecast).ToList();
            if (needHistoricalForecast.Count() > 0)
            {
                var histForecast = _ws.GetHistoricalForecast(response.Lat, response.Lon, needHistoricalForecast[0].Date);
                for (var i = 0; i < needHistoricalForecast.Count; i++)
                {
                    response.DaySummaries.First(x => x.Date == needHistoricalForecast[i].Date).Temp = histForecast[i].temperatureMax;
                    response.DaySummaries.First(x => x.Date == needHistoricalForecast[i].Date).Prcp = histForecast[i].precipAccumulation;
                }
            }
            loading = false;
            await AddStationToLocalHistory(response);
        }
    }

    private async Task AddStationToLocalHistory(WeatheredResponse station)
    {
        if (localHistory.Count > 10)
            localHistory.RemoveAt(0);
        localHistory.Add(new LocalHistory { stationName = station.StationName, stationLocId = station.StationLocId });
        await localStorage.SetItemAsStringAsync("StationHistory", JsonSerializer.Serialize(localHistory));
    }

    public class LocalHistory
    {
        public string stationName { get; set; } = "";
        public int stationLocId { get; set; }
    }
}